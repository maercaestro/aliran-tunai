name: Personal Budget CI/CD Pipeline

on:
  push:
    branches: [ personal-budget-pivot, personal-budget-* ]
  pull_request:
    branches: [ personal-budget-pivot ]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production-personal
        - production-dual-mode
      feature_flags:
        description: 'Feature flags (JSON)'
        required: false
        default: '{"ENABLE_PERSONAL_BUDGET": true, "ENABLE_BUSINESS": false, "DEFAULT_MODE": "personal"}'

env:
  PYTHON_VERSION: '3.12'

jobs:
  # ============= TESTING PHASE =============
  test-personal-budget:
    name: Test Personal Budget Features
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-personal-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-personal-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio python-dotenv
        
    - name: Create personal budget test environment
      run: |
        cat > .env.test << EOF
        MONGO_URI=mongodb://testuser:testpass@localhost:27017/personal_budget_test?authSource=admin
        OPENAI_API_KEY=test_openai_key
        WHATSAPP_VERIFY_TOKEN=test_verify_token
        WHATSAPP_ACCESS_TOKEN=test_access_token
        WHATSAPP_PHONE_NUMBER_ID=test_phone_id
        FLASK_ENV=testing
        # Personal Budget Feature Flags
        ENABLE_PERSONAL_BUDGET=true
        ENABLE_BUSINESS=false
        DEFAULT_MODE=personal
        EOF
        
    - name: Run personal budget specific tests
      run: |
        echo "Running personal budget feature tests..."
        # Test personal budget components
        python -m pytest tests/test_personal_budget.py -v || echo "Personal budget tests need to be created"
        
        # Test feature flag functionality
        python -c "
        import sys
        sys.path.append('frontend/src')
        try:
            from config.featureFlags import isFeatureEnabled, getDefaultMode
            print('✅ Feature flags working')
            print(f'Personal budget enabled: {isFeatureEnabled(\"PERSONAL_BUDGET_MODE\")}')
            print(f'Default mode: {getDefaultMode()}')
        except Exception as e:
            print(f'⚠️ Feature flags need configuration: {e}')
        "
        
    - name: Test dual mode functionality
      run: |
        echo "Testing dual mode switching..."
        # Create dual mode test
        cat > .env.dual << EOF
        MONGO_URI=mongodb://testuser:testpass@localhost:27017/dual_mode_test?authSource=admin
        ENABLE_PERSONAL_BUDGET=true
        ENABLE_BUSINESS=true
        ALLOW_MODE_SWITCHING=true
        DEFAULT_MODE=personal
        EOF
        
        # Test both modes can coexist
        python -c "
        import os
        os.environ['ENABLE_PERSONAL_BUDGET'] = 'true'
        os.environ['ENABLE_BUSINESS'] = 'true'
        print('✅ Dual mode configuration test passed')
        "

  # ============= FRONTEND TESTING =============
  test-frontend:
    name: Test Frontend (React)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci
        
    - name: Create test environment for frontend
      working-directory: frontend
      run: |
        cat > .env.test << EOF
        REACT_APP_API_BASE_URL=http://localhost:5000
        REACT_APP_ENABLE_PERSONAL_BUDGET=true
        REACT_APP_ENABLE_BUSINESS=true
        REACT_APP_ALLOW_MODE_SWITCHING=true
        REACT_APP_DEFAULT_MODE=personal
        EOF
        
    - name: Run frontend linting
      working-directory: frontend
      run: |
        npm run lint || echo "Linting issues found"
        
    - name: Build frontend
      working-directory: frontend
      run: |
        npm run build
        
    - name: Test routing structure
      working-directory: frontend
      run: |
        echo "Testing if new components exist..."
        ls -la src/components/ModeSelector.jsx || echo "ModeSelector not found"
        ls -la src/components/personal/ || echo "Personal components not found"
        ls -la src/config/featureFlags.js || echo "Feature flags not found"
        echo "✅ Frontend structure validation completed"

  # ============= DEPLOYMENT TO STAGING =============
  deploy-staging:
    name: Deploy to Staging (Personal Budget)
    runs-on: ubuntu-latest
    needs: [test-personal-budget, test-frontend]
    if: github.ref == 'refs/heads/personal-budget-pivot' && github.event_name == 'push'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key for staging
      run: |
        mkdir -p ~/.ssh
        printf '%s\n' '${{ secrets.STAGING_SSH_PRIVATE_KEY }}' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
        
    - name: Build deployment package with feature flags
      run: |
        echo "Creating personal budget deployment package..."
        
        # Create feature flag configuration for personal budget mode
        cat > deployment_config.env << EOF
        # Personal Budget Deployment Configuration
        ENABLE_PERSONAL_BUDGET=true
        ENABLE_BUSINESS=false
        ALLOW_MODE_SWITCHING=false
        DEFAULT_MODE=personal
        
        # API Configuration
        MONGO_URI=${{ secrets.STAGING_MONGO_URI }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        WHATSAPP_VERIFY_TOKEN=${{ secrets.WHATSAPP_VERIFY_TOKEN }}
        WHATSAPP_ACCESS_TOKEN=${{ secrets.WHATSAPP_ACCESS_TOKEN }}
        WHATSAPP_PHONE_NUMBER_ID=${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
        WEBHOOK_URL=${{ secrets.STAGING_WEBHOOK_URL }}
        FLASK_ENV=staging
        PORT=5002
        EOF
        
        # Package everything including frontend
        tar -czvf personal-budget-package.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='.pytest_cache' \
          --exclude='*.log' \
          --exclude='venv' \
          --exclude='aliran' \
          . deployment_config.env
          
    - name: Deploy personal budget to staging
      run: |
        scp -i ~/.ssh/id_rsa personal-budget-package.tar.gz ec2-user@${{ secrets.STAGING_HOST }}:/tmp/
        
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.STAGING_HOST }} << 'EOF'
          set -e
          echo "Deploying personal budget to staging..."
          
          # Create staging directory
          sudo mkdir -p /opt/aliran-tunai-staging
          cd /opt/aliran-tunai-staging
          
          # Stop existing services
          sudo systemctl stop aliran-tunai-staging || echo "Service not running"
          
          # Extract new deployment
          sudo rm -rf current || true
          sudo mkdir -p current
          cd current
          sudo tar -xzf /tmp/personal-budget-package.tar.gz
          sudo chown -R ec2-user:ec2-user .
          
          # Setup virtual environment
          /usr/local/bin/python3.12 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Setup configuration for personal budget mode
          cp deployment_config.env .env
          
          # Build frontend with personal budget settings
          cd frontend
          npm ci
          
          # Create frontend production build with personal budget flags
          cat > .env.production << FRONTEND_ENV
        REACT_APP_API_BASE_URL=${{ secrets.STAGING_WEBHOOK_URL }}
        REACT_APP_ENABLE_PERSONAL_BUDGET=true
        REACT_APP_ENABLE_BUSINESS=false
        REACT_APP_ALLOW_MODE_SWITCHING=false
        REACT_APP_DEFAULT_MODE=personal
        FRONTEND_ENV
          
          npm run build
          cd ..
          
          # Create staging service file
          sudo tee /etc/systemd/system/aliran-tunai-staging.service > /dev/null << SERVICE_EOF
        [Unit]
        Description=Aliran Tunai Personal Budget - Staging
        After=network.target
        
        [Service]
        Type=simple
        User=ec2-user
        WorkingDirectory=/opt/aliran-tunai-staging/current
        Environment=PATH=/opt/aliran-tunai-staging/current/venv/bin
        ExecStart=/opt/aliran-tunai-staging/current/venv/bin/python whatsapp_business_api.py
        Restart=always
        RestartSec=10
        
        [Install]
        WantedBy=multi-user.target
        SERVICE_EOF
          
          # Start staging service
          sudo systemctl daemon-reload
          sudo systemctl enable aliran-tunai-staging
          sudo systemctl start aliran-tunai-staging
          
          # Wait and verify
          sleep 10
          sudo systemctl status aliran-tunai-staging --no-pager
          
          echo "✅ Personal budget staging deployment completed!"
        EOF

  # ============= PRODUCTION DEPLOYMENT =============
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine deployment configuration
      id: config
      run: |
        DEPLOYMENT_TARGET="${{ github.event.inputs.deployment_target }}"
        FEATURE_FLAGS="${{ github.event.inputs.feature_flags }}"
        
        echo "deployment_target=${DEPLOYMENT_TARGET}" >> $GITHUB_OUTPUT
        echo "feature_flags=${FEATURE_FLAGS}" >> $GITHUB_OUTPUT
        
        case $DEPLOYMENT_TARGET in
          "production-personal")
            echo "deploying_personal_only=true" >> $GITHUB_OUTPUT
            echo "deploying_business=false" >> $GITHUB_OUTPUT
            ;;
          "production-dual-mode")
            echo "deploying_personal_only=false" >> $GITHUB_OUTPUT
            echo "deploying_business=true" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "❌ Invalid deployment target: $DEPLOYMENT_TARGET"
            exit 1
            ;;
        esac
        
    - name: Setup SSH key for production
      run: |
        mkdir -p ~/.ssh
        printf '%s\n' '${{ secrets.EC2_SSH_PRIVATE_KEY }}' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to production with selected configuration
      run: |
        echo "Deploying to production with target: ${{ steps.config.outputs.deployment_target }}"
        
        # Create production environment configuration
        if [ "${{ steps.config.outputs.deploying_personal_only }}" = "true" ]; then
          cat > production_config.env << EOF
        # Personal Budget Only Configuration
        ENABLE_PERSONAL_BUDGET=true
        ENABLE_BUSINESS=false
        ALLOW_MODE_SWITCHING=false
        DEFAULT_MODE=personal
        EOF
        else
          cat > production_config.env << EOF
        # Dual Mode Configuration
        ENABLE_PERSONAL_BUDGET=true
        ENABLE_BUSINESS=true
        ALLOW_MODE_SWITCHING=true
        DEFAULT_MODE=personal
        EOF
        fi
        
        # Add production secrets
        cat >> production_config.env << EOF
        MONGO_URI=${{ secrets.MONGO_URI }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        WHATSAPP_VERIFY_TOKEN=${{ secrets.WHATSAPP_VERIFY_TOKEN }}
        WHATSAPP_ACCESS_TOKEN=${{ secrets.WHATSAPP_ACCESS_TOKEN }}
        WHATSAPP_PHONE_NUMBER_ID=${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
        WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}
        FLASK_ENV=production
        PORT=5002
        EOF
        
        # Create deployment package
        tar -czvf production-package.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          . production_config.env
          
        # Upload and deploy
        scp -i ~/.ssh/id_rsa production-package.tar.gz ec2-user@${{ secrets.EC2_HOST }}:/tmp/
        
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Starting production deployment..."
          
          # Backup current deployment
          cd /opt/aliran-tunai
          if [ -d "current" ]; then
            sudo mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Deploy new version
          sudo mkdir -p current
          cd current
          sudo tar -xzf /tmp/production-package.tar.gz
          sudo chown -R ec2-user:ec2-user .
          
          # Setup environment
          /usr/local/bin/python3.12 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Use production configuration
          cp production_config.env .env
          
          # Build frontend with production settings
          cd frontend
          npm ci
          
          # Create production frontend build
          if [ "${{ steps.config.outputs.deploying_personal_only }}" = "true" ]; then
            cat > .env.production << FRONTEND_EOF
        REACT_APP_API_BASE_URL=${{ secrets.WEBHOOK_URL }}
        REACT_APP_ENABLE_PERSONAL_BUDGET=true
        REACT_APP_ENABLE_BUSINESS=false
        REACT_APP_ALLOW_MODE_SWITCHING=false
        REACT_APP_DEFAULT_MODE=personal
        FRONTEND_EOF
          else
            cat > .env.production << FRONTEND_EOF
        REACT_APP_API_BASE_URL=${{ secrets.WEBHOOK_URL }}
        REACT_APP_ENABLE_PERSONAL_BUDGET=true
        REACT_APP_ENABLE_BUSINESS=true
        REACT_APP_ALLOW_MODE_SWITCHING=true
        REACT_APP_DEFAULT_MODE=personal
        FRONTEND_ENV
          fi
          
          npm run build
          cd ..
          
          # Restart services
          sudo systemctl stop aliran-tunai || true
          sudo systemctl stop aliran-whatsapp || true
          sudo systemctl start aliran-tunai
          sudo systemctl start aliran-whatsapp
          
          echo "✅ Production deployment completed!"
        EOF
        
    - name: Verify production deployment
      run: |
        echo "Verifying production deployment..."
        sleep 30
        
        # Test endpoints
        curl -f http://${{ secrets.EC2_HOST }}/health || echo "Health check failed"
        
        echo "Production deployment verification completed!"

  # ============= ROLLBACK JOB =============
  rollback-personal-budget:
    name: Rollback Personal Budget Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/personal-budget-pivot' || github.event_name == 'workflow_dispatch')
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Rollback deployment
      run: |
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Rolling back personal budget deployment..."
          
          cd /opt/aliran-tunai
          
          # Find most recent backup
          BACKUP_DIR=$(ls -td backup-* 2>/dev/null | head -1)
          
          if [ -n "$BACKUP_DIR" ]; then
            echo "Rolling back to: $BACKUP_DIR"
            
            sudo systemctl stop aliran-tunai || true
            sudo systemctl stop aliran-whatsapp || true
            
            sudo rm -rf current
            sudo cp -r "$BACKUP_DIR" current
            
            cd current
            source venv/bin/activate
            
            sudo systemctl start aliran-tunai
            sudo systemctl start aliran-whatsapp
            
            echo "✅ Rollback completed!"
          else
            echo "❌ No backup found for rollback!"
            exit 1
          fi
        EOF