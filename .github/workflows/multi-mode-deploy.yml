name: Multi-Mode Deployment Manager

on:
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'What to deploy?'
        required: true
        type: choice
        options:
        - 'personal-budget-only'
        - 'business-only' 
        - 'dual-mode'
        - 'staging-test'
      target_environment:
        description: 'Where to deploy?'
        required: true
        type: choice
        options:
        - 'staging'
        - 'production'
      source_branch:
        description: 'Source branch'
        required: true
        default: 'personal-budget-pivot'
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  # ============= DEPLOYMENT PLANNING =============
  plan-deployment:
    name: Plan Deployment Strategy
    runs-on: ubuntu-latest
    
    outputs:
      deploy_personal: ${{ steps.plan.outputs.deploy_personal }}
      deploy_business: ${{ steps.plan.outputs.deploy_business }}
      allow_switching: ${{ steps.plan.outputs.allow_switching }}
      default_mode: ${{ steps.plan.outputs.default_mode }}
      deployment_name: ${{ steps.plan.outputs.deployment_name }}
      
    steps:
    - name: Plan deployment configuration
      id: plan
      run: |
        DEPLOYMENT_MODE="${{ github.event.inputs.deployment_mode }}"
        TARGET_ENV="${{ github.event.inputs.target_environment }}"
        
        echo "Planning deployment: $DEPLOYMENT_MODE to $TARGET_ENV"
        
        case $DEPLOYMENT_MODE in
          "personal-budget-only")
            echo "deploy_personal=true" >> $GITHUB_OUTPUT
            echo "deploy_business=false" >> $GITHUB_OUTPUT
            echo "allow_switching=false" >> $GITHUB_OUTPUT
            echo "default_mode=personal" >> $GITHUB_OUTPUT
            echo "deployment_name=Personal Budget Tracker" >> $GITHUB_OUTPUT
            ;;
          "business-only")
            echo "deploy_personal=false" >> $GITHUB_OUTPUT
            echo "deploy_business=true" >> $GITHUB_OUTPUT
            echo "allow_switching=false" >> $GITHUB_OUTPUT
            echo "default_mode=business" >> $GITHUB_OUTPUT
            echo "deployment_name=B2B Cash Flow Tracker" >> $GITHUB_OUTPUT
            ;;
          "dual-mode")
            echo "deploy_personal=true" >> $GITHUB_OUTPUT
            echo "deploy_business=true" >> $GITHUB_OUTPUT
            echo "allow_switching=true" >> $GITHUB_OUTPUT
            echo "default_mode=personal" >> $GITHUB_OUTPUT
            echo "deployment_name=Dual Mode Financial Tracker" >> $GITHUB_OUTPUT
            ;;
          "staging-test")
            echo "deploy_personal=true" >> $GITHUB_OUTPUT
            echo "deploy_business=true" >> $GITHUB_OUTPUT
            echo "allow_switching=true" >> $GITHUB_OUTPUT
            echo "default_mode=personal" >> $GITHUB_OUTPUT
            echo "deployment_name=Staging Test Environment" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "❌ Invalid deployment mode: $DEPLOYMENT_MODE"
            exit 1
            ;;
        esac
        
        echo "✅ Deployment plan created successfully"

  # ============= BUILD AND TEST =============
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [plan-deployment]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.source_branch }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Test configuration compatibility
      run: |
        echo "Testing deployment configuration..."
        
        DEPLOY_PERSONAL="${{ needs.plan-deployment.outputs.deploy_personal }}"
        DEPLOY_BUSINESS="${{ needs.plan-deployment.outputs.deploy_business }}"
        ALLOW_SWITCHING="${{ needs.plan-deployment.outputs.allow_switching }}"
        DEFAULT_MODE="${{ needs.plan-deployment.outputs.default_mode }}"
        
        echo "Personal Budget: $DEPLOY_PERSONAL"
        echo "Business Mode: $DEPLOY_BUSINESS"
        echo "Mode Switching: $ALLOW_SWITCHING"
        echo "Default Mode: $DEFAULT_MODE"
        
        # Test feature flag configuration
        cat > test_config.env << EOF
        REACT_APP_ENABLE_PERSONAL_BUDGET=$DEPLOY_PERSONAL
        REACT_APP_ENABLE_BUSINESS=$DEPLOY_BUSINESS
        REACT_APP_ALLOW_MODE_SWITCHING=$ALLOW_SWITCHING
        REACT_APP_DEFAULT_MODE=$DEFAULT_MODE
        EOF
        
        echo "Generated configuration:"
        cat test_config.env
        
        # Validate configuration makes sense
        if [ "$DEPLOY_PERSONAL" = "false" ] && [ "$DEPLOY_BUSINESS" = "false" ]; then
          echo "❌ Error: Both modes disabled!"
          exit 1
        fi
        
        if [ "$ALLOW_SWITCHING" = "true" ] && ([ "$DEPLOY_PERSONAL" = "false" ] || [ "$DEPLOY_BUSINESS" = "false" ]); then
          echo "❌ Error: Mode switching enabled but not both modes available!"
          exit 1
        fi
        
        echo "✅ Configuration validation passed"
        
    - name: Build frontend with configuration
      working-directory: frontend
      run: |
        echo "Installing frontend dependencies..."
        npm ci
        
        echo "Creating deployment configuration..."
        cat > .env.production << EOF
        REACT_APP_API_BASE_URL=\${API_BASE_URL}
        REACT_APP_ENABLE_PERSONAL_BUDGET=${{ needs.plan-deployment.outputs.deploy_personal }}
        REACT_APP_ENABLE_BUSINESS=${{ needs.plan-deployment.outputs.deploy_business }}
        REACT_APP_ALLOW_MODE_SWITCHING=${{ needs.plan-deployment.outputs.allow_switching }}
        REACT_APP_DEFAULT_MODE=${{ needs.plan-deployment.outputs.default_mode }}
        EOF
        
        echo "Building frontend..."
        npm run build
        
        echo "✅ Frontend build completed successfully"
        
    - name: Create deployment artifact
      run: |
        echo "Creating deployment artifact for: ${{ needs.plan-deployment.outputs.deployment_name }}"
        
        # Create deployment configuration
        cat > deployment_config.env << EOF
        # ${{ needs.plan-deployment.outputs.deployment_name }} Configuration
        # Generated on: $(date)
        # Deployment mode: ${{ github.event.inputs.deployment_mode }}
        # Target: ${{ github.event.inputs.target_environment }}
        
        ENABLE_PERSONAL_BUDGET=${{ needs.plan-deployment.outputs.deploy_personal }}
        ENABLE_BUSINESS=${{ needs.plan-deployment.outputs.deploy_business }}
        ALLOW_MODE_SWITCHING=${{ needs.plan-deployment.outputs.allow_switching }}
        DEFAULT_MODE=${{ needs.plan-deployment.outputs.default_mode }}
        
        FLASK_ENV=${{ github.event.inputs.target_environment }}
        PORT=5002
        EOF
        
        # Create deployment package
        tar -czvf multi-mode-deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='.pytest_cache' \
          --exclude='*.log' \
          --exclude='venv' \
          . deployment_config.env
          
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: multi-mode-deployment-${{ github.event.inputs.deployment_mode }}
        path: |
          multi-mode-deployment.tar.gz
          deployment_config.env

  # ============= DEPLOY TO ENVIRONMENT =============
  deploy:
    name: Deploy ${{ needs.plan-deployment.outputs.deployment_name }}
    runs-on: ubuntu-latest
    needs: [plan-deployment, build-and-test]
    
    environment: ${{ github.event.inputs.target_environment }}
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: multi-mode-deployment-${{ github.event.inputs.deployment_mode }}
        
    - name: Setup SSH connection
      run: |
        mkdir -p ~/.ssh
        
        # Use different SSH keys based on environment
        if [ "${{ github.event.inputs.target_environment }}" = "staging" ]; then
          printf '%s\n' '${{ secrets.STAGING_SSH_PRIVATE_KEY }}' > ~/.ssh/id_rsa
          echo "${{ secrets.STAGING_HOST }}" > ~/.ssh/target_host
        else
          printf '%s\n' '${{ secrets.EC2_SSH_PRIVATE_KEY }}' > ~/.ssh/id_rsa
          echo "${{ secrets.EC2_HOST }}" > ~/.ssh/target_host
        fi
        
        chmod 600 ~/.ssh/id_rsa
        TARGET_HOST=$(cat ~/.ssh/target_host)
        ssh-keyscan -H $TARGET_HOST >> ~/.ssh/known_hosts
        
    - name: Deploy to target environment
      run: |
        TARGET_HOST=$(cat ~/.ssh/target_host)
        DEPLOYMENT_MODE="${{ github.event.inputs.deployment_mode }}"
        TARGET_ENV="${{ github.event.inputs.target_environment }}"
        
        echo "Deploying $DEPLOYMENT_MODE to $TARGET_ENV on $TARGET_HOST"
        
        # Upload deployment package
        scp -i ~/.ssh/id_rsa multi-mode-deployment.tar.gz ec2-user@$TARGET_HOST:/tmp/
        scp -i ~/.ssh/id_rsa deployment_config.env ec2-user@$TARGET_HOST:/tmp/
        
        # Deploy on target server
        ssh -i ~/.ssh/id_rsa ec2-user@$TARGET_HOST << EOF
          set -e
          echo "Starting deployment of: ${{ needs.plan-deployment.outputs.deployment_name }}"
          
          # Create deployment directory
          DEPLOY_DIR="/opt/aliran-tunai-$TARGET_ENV"
          sudo mkdir -p \$DEPLOY_DIR
          cd \$DEPLOY_DIR
          
          # Backup current deployment
          if [ -d "current" ]; then
            TIMESTAMP=\$(date +%Y%m%d-%H%M%S)
            sudo mv current backup-\$TIMESTAMP
            echo "Created backup: backup-\$TIMESTAMP"
          fi
          
          # Extract new deployment
          sudo mkdir -p current
          cd current
          sudo tar -xzf /tmp/multi-mode-deployment.tar.gz
          sudo chown -R ec2-user:ec2-user .
          
          # Setup Python environment
          /usr/local/bin/python3.12 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Configure environment
          cp /tmp/deployment_config.env .env
          
          # Add environment-specific secrets
          cat >> .env << ENV_SECRETS
        MONGO_URI=\${{ secrets.MONGO_URI }}
        OPENAI_API_KEY=\${{ secrets.OPENAI_API_KEY }}
        WHATSAPP_VERIFY_TOKEN=\${{ secrets.WHATSAPP_VERIFY_TOKEN }}
        WHATSAPP_ACCESS_TOKEN=\${{ secrets.WHATSAPP_ACCESS_TOKEN }}
        WHATSAPP_PHONE_NUMBER_ID=\${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
        WEBHOOK_URL=\${{ secrets.WEBHOOK_URL }}
        ENV_SECRETS
          
          # Update frontend configuration
          if [ -d "frontend/build" ]; then
            cd frontend
            
            # Update frontend environment for deployment
            cat > .env.production << FRONTEND_CONFIG
        REACT_APP_API_BASE_URL=\${{ secrets.WEBHOOK_URL }}
        REACT_APP_ENABLE_PERSONAL_BUDGET=${{ needs.plan-deployment.outputs.deploy_personal }}
        REACT_APP_ENABLE_BUSINESS=${{ needs.plan-deployment.outputs.deploy_business }}
        REACT_APP_ALLOW_MODE_SWITCHING=${{ needs.plan-deployment.outputs.allow_switching }}
        REACT_APP_DEFAULT_MODE=${{ needs.plan-deployment.outputs.default_mode }}
        FRONTEND_CONFIG
            
            cd ..
          fi
          
          # Create systemd service
          SERVICE_NAME="aliran-tunai-$TARGET_ENV"
          sudo tee /etc/systemd/system/\$SERVICE_NAME.service > /dev/null << SERVICE_CONFIG
        [Unit]
        Description=${{ needs.plan-deployment.outputs.deployment_name }} - $TARGET_ENV
        After=network.target
        
        [Service]
        Type=simple
        User=ec2-user
        WorkingDirectory=\$DEPLOY_DIR/current
        Environment=PATH=\$DEPLOY_DIR/current/venv/bin
        ExecStart=\$DEPLOY_DIR/current/venv/bin/python whatsapp_business_api.py
        Restart=always
        RestartSec=10
        StandardOutput=journal
        StandardError=journal
        
        [Install]
        WantedBy=multi-user.target
        SERVICE_CONFIG
          
          # Start the service
          sudo systemctl daemon-reload
          sudo systemctl stop \$SERVICE_NAME || echo "Service was not running"
          sudo systemctl enable \$SERVICE_NAME
          sudo systemctl start \$SERVICE_NAME
          
          # Wait for service to start
          sleep 15
          
          # Verify deployment
          if sudo systemctl is-active --quiet \$SERVICE_NAME; then
            echo "✅ Service \$SERVICE_NAME is running"
          else
            echo "❌ Service \$SERVICE_NAME failed to start"
            sudo systemctl status \$SERVICE_NAME --no-pager
            sudo journalctl -u \$SERVICE_NAME --no-pager -n 20
            exit 1
          fi
          
          echo "✅ Deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      run: |
        TARGET_HOST=$(cat ~/.ssh/target_host)
        
        echo "Verifying deployment on $TARGET_HOST..."
        sleep 30
        
        # Test health endpoint
        if curl -f -s http://$TARGET_HOST/health > /dev/null; then
          echo "✅ Health endpoint responding"
        else
          echo "⚠️ Health endpoint not responding (may need nginx configuration)"
        fi
        
        # Test mode configuration
        echo "Testing mode configuration..."
        ssh -i ~/.ssh/id_rsa ec2-user@$TARGET_HOST << 'EOF'
          cd /opt/aliran-tunai-${{ github.event.inputs.target_environment }}/current
          source venv/bin/activate
          
          echo "Environment configuration:"
          grep -E "(ENABLE_PERSONAL|ENABLE_BUSINESS|DEFAULT_MODE)" .env || echo "Configuration not found"
        EOF
        
        echo "✅ Deployment verification completed!"

  # ============= POST-DEPLOYMENT NOTIFICATION =============
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [plan-deployment, deploy]
    if: always()
    
    steps:
    - name: Generate deployment report
      run: |
        echo "📊 Deployment Report" > deployment-report.md
        echo "===================" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "**Deployment:** ${{ needs.plan-deployment.outputs.deployment_name }}" >> deployment-report.md
        echo "**Mode:** ${{ github.event.inputs.deployment_mode }}" >> deployment-report.md
        echo "**Environment:** ${{ github.event.inputs.target_environment }}" >> deployment-report.md
        echo "**Source Branch:** ${{ github.event.inputs.source_branch }}" >> deployment-report.md
        echo "**Status:** ${{ needs.deploy.result }}" >> deployment-report.md
        echo "**Timestamp:** $(date)" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "**Configuration:**" >> deployment-report.md
        echo "- Personal Budget: ${{ needs.plan-deployment.outputs.deploy_personal }}" >> deployment-report.md
        echo "- Business Mode: ${{ needs.plan-deployment.outputs.deploy_business }}" >> deployment-report.md
        echo "- Mode Switching: ${{ needs.plan-deployment.outputs.allow_switching }}" >> deployment-report.md
        echo "- Default Mode: ${{ needs.plan-deployment.outputs.default_mode }}" >> deployment-report.md
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "" >> deployment-report.md
          echo "✅ **Deployment completed successfully!**" >> deployment-report.md
        else
          echo "" >> deployment-report.md
          echo "❌ **Deployment failed. Check logs for details.**" >> deployment-report.md
        fi
        
        echo "Deployment Report:"
        cat deployment-report.md
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ github.event.inputs.deployment_mode }}-${{ github.event.inputs.target_environment }}
        path: deployment-report.md